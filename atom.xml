<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>l-tlon</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lavaong.github.io/"/>
  <updated>2018-06-14T09:22:34.789Z</updated>
  <id>https://lavaong.github.io/</id>
  
  <author>
    <name>Lavaong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringCloud微服务实战（1）</title>
    <link href="https://lavaong.github.io/2018/05/02/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98%EF%BC%881%EF%BC%89/"/>
    <id>https://lavaong.github.io/2018/05/02/SpringCloud微服务实战（1）/</id>
    <published>2018-05-02T15:25:38.000Z</published>
    <updated>2018-06-14T09:22:34.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记录学习Spring-Cloud的中Eureka集群的问题"><a href="#记录学习Spring-Cloud的中Eureka集群的问题" class="headerlink" title="记录学习Spring-Cloud的中Eureka集群的问题"></a>记录学习Spring-Cloud的中Eureka集群的问题</h2><p>在Eureka单节点的配置文件: <strong>application.properties</strong>:  </p>
<pre><code>server.port=8081
eureka.instance.hostname=localhost
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/
</code></pre><p>另外，在pom文件中需要加入Eureka相关的starter POMs,需要指定Spring-Cloud的版本号，<br><a id="more"></a><br>此处使用Edgware.SR3（埃奇韦尔-伦敦一地铁站名字）版本号，  </p>
<pre><code>&lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
    &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;Edgware.SR3&lt;/spring-cloud.version&gt;
&lt;/properties&gt;
.....
&lt;dependencies&gt;    
&lt;dependency&gt;
        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
        &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;
&lt;/dependency&gt;
....
&lt;/dependencies&gt;
&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;  
</code></pre><p>之后在Spring-boot的主启动文件Application.java类的定义头上加入@EnableEurekaServer注解即可，启动应用程序，单机Eureka注册中心即建立完成，访问localhost:8081可查看Eureka注册中心的Web详情页。<br>(2)  Eureka server集群的建立原理是将自己作为服务向其他服务注册中心注册自己，这样就可以形成一组互相注册的服务注册中心集群，<strong>但是服务注册信息不会进行二次链式循环传播，即1注册到2,2注册到3,3注册到1，这种，服务在1注册的不会同步到3上，这在PeerAwareInstanceImpl类中体现</strong>。<br>Server集群可在原有的单机项目基础上进行改建，只需增application-peer1.properties,application-peer2.properties,application-peer3.properties,三个相关的配置文件，并将原application.properties中的两个选项：  </p>
<pre><code>eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false  
</code></pre><p>两项false改成true,或者注解掉.因为默认是true,这两项配置的意思是是否允许Erueka server注册自己,是否检索服务。<br>application-peer1.properties文件如下：  </p>
<pre><code>spring.application.name=eureka-server
server.port=8081
eureka.instance.hostname=peer1
eureka.client.serviceUrl.defaultZone=http://peer2:80822/eureka/，http://peer3:8083/eureka/  
</code></pre><p>其他两个文件与此文件类似，改写即可，然后在通过java -jar <em>*</em>.jar –spring.profiles.active=peer1，….. 命令分别启动三个服务注册中心应用，另:–需要提前在hosts文件中为每个分片配置地址解析  ：</p>
<blockquote>
<p>127.0.0.1 peer1<br>127.0.0.1 peer2<br>127.0.0.1 peer3  </p>
</blockquote>
<p>在命令行中执行上述启动命令后，可能会报如下异常：<br><img src="/uploads/eureka 集群error.png" alt="error">  </p>
<p>即连接超时Exception,这种状况是正常的，因为在你启动一个注册中心后，另外两个注册中心还没启动，此时尝试连接这两个，当然会连接超时。在所有注册中心都启动后，日志信息会正常输出。至此，Eureka Server高可用集群搭建完毕。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;记录学习Spring-Cloud的中Eureka集群的问题&quot;&gt;&lt;a href=&quot;#记录学习Spring-Cloud的中Eureka集群的问题&quot; class=&quot;headerlink&quot; title=&quot;记录学习Spring-Cloud的中Eureka集群的问题&quot;&gt;&lt;/a&gt;记录学习Spring-Cloud的中Eureka集群的问题&lt;/h2&gt;&lt;p&gt;在Eureka单节点的配置文件: &lt;strong&gt;application.properties&lt;/strong&gt;:  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server.port=8081
eureka.instance.hostname=localhost
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外，在pom文件中需要加入Eureka相关的starter POMs,需要指定Spring-Cloud的版本号，&lt;br&gt;
    
    </summary>
    
      <category term="Java SpringCloud Spring-boot" scheme="https://lavaong.github.io/categories/Java-SpringCloud-Spring-boot/"/>
    
    
      <category term="学习" scheme="https://lavaong.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MySql安装问题</title>
    <link href="https://lavaong.github.io/2018/04/28/MySql-For-Windows7-Regedit-service-error/"/>
    <id>https://lavaong.github.io/2018/04/28/MySql-For-Windows7-Regedit-service-error/</id>
    <published>2018-04-28T09:42:57.000Z</published>
    <updated>2018-06-14T08:59:40.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记一次Mysql注册服务相关问题"><a href="#记一次Mysql注册服务相关问题" class="headerlink" title="记一次Mysql注册服务相关问题"></a>记一次Mysql注册服务相关问题</h2><h3 id="mysql解压版本的正确启动："><a href="#mysql解压版本的正确启动：" class="headerlink" title="mysql解压版本的正确启动："></a>mysql解压版本的正确启动：</h3><ol>
<li>需要配置环境变量，环境变量的配置建议在系统Path中配置，配置完bin目录后.</li>
<li>需要配置默认的my-default.ini配置文件，主要就是设置字符编码和basedir和datadir两个配置选项，分别为mysql的解压目录和mysql的数据存储目录，数据存储目录需要我们手动在mysql的根目录下建立data文件夹<a id="more"></a></li>
<li>初始化mysql命令:mysqld –initialize-insecure –user=mysql</li>
<li>注册mysql服务：mysqld –install mysql服务名（可自定义）–defaults-file=”mysql配置文件的路径”，<strong>注意</strong>，此处注册的mysql的配置文件不可以用其默认的my-default.ini，必须另外建立一个该文件的副本如my.ini,否则会导致服务启动失败，如下图所示：<br><img src="/uploads\mysql service error.png" alt="error">  </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;记一次Mysql注册服务相关问题&quot;&gt;&lt;a href=&quot;#记一次Mysql注册服务相关问题&quot; class=&quot;headerlink&quot; title=&quot;记一次Mysql注册服务相关问题&quot;&gt;&lt;/a&gt;记一次Mysql注册服务相关问题&lt;/h2&gt;&lt;h3 id=&quot;mysql解压版本的正确启动：&quot;&gt;&lt;a href=&quot;#mysql解压版本的正确启动：&quot; class=&quot;headerlink&quot; title=&quot;mysql解压版本的正确启动：&quot;&gt;&lt;/a&gt;mysql解压版本的正确启动：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;需要配置环境变量，环境变量的配置建议在系统Path中配置，配置完bin目录后.&lt;/li&gt;
&lt;li&gt;需要配置默认的my-default.ini配置文件，主要就是设置字符编码和basedir和datadir两个配置选项，分别为mysql的解压目录和mysql的数据存储目录，数据存储目录需要我们手动在mysql的根目录下建立data文件夹
    
    </summary>
    
      <category term="Java" scheme="https://lavaong.github.io/categories/Java/"/>
    
    
      <category term="学习" scheme="https://lavaong.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>面试知识点整理</title>
    <link href="https://lavaong.github.io/2018/04/28/%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>https://lavaong.github.io/2018/04/28/面试知识点整理/</id>
    <published>2018-04-28T09:42:57.000Z</published>
    <updated>2018-06-14T09:20:37.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JAVA基础部分："><a href="#JAVA基础部分：" class="headerlink" title="JAVA基础部分："></a>JAVA基础部分：</h2><h3 id="final-finally-finalize区别："><a href="#final-finally-finalize区别：" class="headerlink" title="final,finally,finalize区别："></a>final,finally,finalize区别：</h3><ul>
<li>final可以修饰方法，类，成员变量，当final修饰基本类型的成员变量时，该成员变量的值不可变，当fina修饰引用变量时，改引用指向的对象实体不可变，但是对象实体中的内容可变。当修饰类时，final和abstract不可同时使用，abstract意指该类是抽象的，用于扩展的。final修饰类时则意味着该类是不可被继承和扩展的。修饰方法时，该方法不可被重写。修饰形参时，该形参不可在方法内被重新赋值。<a id="more"></a>
当方法内有定义内部类或者内部匿名类时，该方法的成员变量必须被final所修饰，因为在成员内部类中可能会修改该成员变量的值，这扩大了该变量的范围，造成安全隐患。</li>
<li>finally一般用在try catch 后，无论程序是否抛出异常，必定会执行finally中的语句块，一般用于IO资源的释放，或者连接资源的释放。</li>
<li>finalize是Object中的一个方法，用于资源回收。<h3 id="Exception-Error："><a href="#Exception-Error：" class="headerlink" title="Exception,Error："></a>Exception,Error：</h3></li>
<li>都继承自Throwable，error属于非受检类型，一般是底层资源错误或者系统错误 Ex:栈溢出,或者OOM(堆内存溢出)，不能在应用代码级别被处理.</li>
<li>Exception分为 RuntimeException(运行时)和其他Exception（编译时）,RuntimeException也属于非受检类型，通常指应用程序运行中出现的bug导致的，Ex:NullPointerException,ArrayIndexOutOfBoundException,ClassCastException,Illegal<br>StatementException其他Exception属于受检类型，编译时异常如 IO Exception。异常的处理方式：提倡提早捕获，延迟抛出。出现异常时，若可以解决则捕捉，不能解决则抛出。<h3 id="Integer和int（包装类和拆箱，装箱）"><a href="#Integer和int（包装类和拆箱，装箱）" class="headerlink" title="Integer和int（包装类和拆箱，装箱）:"></a>Integer和int（包装类和拆箱，装箱）:</h3></li>
<li>Integer是int的包装类，基本类型都有包装类，包装类能自动转化成相应的基本数据类型，称为拆箱，如包装类做算数运算时，反之（new Integer(1)），称为装箱。装箱和拆箱的设计是一种享元设计模式（它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件）,在装箱的时候，对于在-128到127的int值，Integer会从IntegerCache中拿到相应的复用对象。当大于127时，会重新new一个Integer对象。<h3 id="StringBuffer-StringBuilder-String"><a href="#StringBuffer-StringBuilder-String" class="headerlink" title="StringBuffer,StringBuilder,String:"></a>StringBuffer,StringBuilder,String:</h3></li>
<li>String的具体实现为 final char value[],他是immutable的（不可变对象），不会存在多线程访问的安全问题，但是性能会有所降低，所以提供了一个可变对象StringBuffer,由于考虑到多线程并发访问的问题，StringBuffer被设计成了Synchronized修饰的，1.5以后，为了提升StringBuffer在单线程下的性能，引入了StringBuilder，StringBuilder和StringBuffer的方法相同，当做字符串连接 ‘+’的使用被编译器所优化，直接在编译期生成一个String对象，如果该对象对象的字符串变量在常量池中已经存在，那么用+ 比用StringBuffer或者StringBuilder都要快，;</li>
<li>重载：在同一个类中，有多个方法名相同，形式参数列表不同的方法，与修饰符无关，与方法的返回值无关。</li>
<li>重写：子类重写父类方法，只有实例方法可以被重写，静态方法不可以被重写，重写的方法签名相同，但访问权限必须大于等于父类的方法，异常是夫类的子类，返回值必须小于父类的返回值，修饰符可以随意更改。</li>
<li>抽象类和接口：抽象类的目的是对根源的抽象，因为在Java中的单继承中只能继承一个抽象类，在这个抽象类中，你必须抽象或者实现所有可能子类要用的方法，但是接口是对动作的抽象，当你关注一个具体的操作时，使用接口。接口中的变量都是static类型的，而抽象类不是。</li>
<li>反射：反射的用途，用于在运行时获得一个类的具体内容或者调用一个类的方法，实现：JDK中的动态代理使用了反射(在运行时调用任意一个被代理类的方法，生成动态代理)<h3 id="Get和Post的区别："><a href="#Get和Post的区别：" class="headerlink" title="Get和Post的区别："></a>Get和Post的区别：</h3></li>
<li>表面上有以下几点不同，get是有缓存的，post没有，get可以刷新和回退，post需要重新提交表单，get对数据长度有限制(url最大2048)，而post时没有数据长度的限制。</li>
<li>安全性：post比get更安全，get请求里的所有数据都会显示在URL里，Post的参数不会被保存在浏览器上或者Web服务器日志上。</li>
<li>但从本质语义上的区别时：Get的语义请求是获取指定的资源，它是，安全，幂等，可缓存的，get方法的报文主体没有任何语义，Post是根据报文主体对指定的资源进行处理具体的处理方式视资源类型不同而不同。<h3 id="Session和cookie的区别："><a href="#Session和cookie的区别：" class="headerlink" title="Session和cookie的区别："></a>Session和cookie的区别：</h3></li>
<li>Http是一种无状态协议，无法保存每次客户端连接时的用户数据（会话保持功能），诞生了Cookie和Session这两种会话跟踪功能，cookied的实现方式是在浏览器向服务器发送Http请求建立会话时，浏览器生成一个会话ID，每次访问你这个服务端，就会把相应的这个cookie给携带上，这就实现了长久的会话保持的<br>功能。而Session和cookie不同点在于Session是由服务端生成的（一般是借助cookieId，但也可以不用），保存在服务端。<h3 id="MVC设计思想："><a href="#MVC设计思想：" class="headerlink" title="MVC设计思想："></a>MVC设计思想：</h3></li>
<li>MVC(model view controller)模型视图控制器模式：一种设计模式，在软件系统的设计中，展示层也被称为视图层，是給用户展示和交互的页面，视图层只是数据的输出终点，并没有真正的业务处理。而在 模型层中是一个数据规范，模型和视图具体的数据格式无关，所以他可以被应用在多个视图当中，这减少了代码的重用性，控制器<br>接受用户的请求并操纵模型和视图去完成用户的需求，他会决定去操纵那个模型构件去处理请求并返回到指定的视图。<h3 id="equals和-："><a href="#equals和-：" class="headerlink" title="equals和==："></a>equals和==：</h3></li>
<li>对于String类型的引用对象，equals比较的是对象在堆中存储的实际内容，而==则比较的是这个对象的句柄引用，对于基本数据类型的对象，==比较的是值,equals不能比较基本数据类型，而对于其他引用对象，==和hashcode（默认继承的是Object中的hashcode方法）则比较的是对象在内存中的句柄引用。</li>
<li>hashcode和equals的方法的区别和联系：hashCode和equals两个都是比较对象是否相等的，重写的Object的equals方法比hashCode更严谨和全面，所以效率就比较低，但是hashcode方法虽然效率高，但是hash算法无法保证每个不同对象生成的hash值不同，既冲突，这是其不可靠的一面。同时。hashcode规范是：一个没有改变的对象调用equals方法时如果相同，则其hashcode方法比较的也必须一致，反之，如果两个对象的hashcode方法得到的唯一散列值一致，则这个对象的equals比较的结果不一定相同。<h3 id="值传递和引用传递："><a href="#值传递和引用传递：" class="headerlink" title="值传递和引用传递："></a>值传递和引用传递：</h3></li>
<li>Java中不存在真正的引用传递，所谓的引用传递和值传递都是指方法调用时参数的传值策略，而不是传递的内容（值或者引用）的类型，至于值类型和引用类型是区分内存分配的两种方式。函数的值传递会创建一个传入对象的副本，所以无法改变原有对象，在引用传递中，则不会创建副本，所以会改变传入的原始对象。在Java中，函数参数的传递方式是值传递，传递的值是引用。<h2 id="JAVA中常见集合部分："><a href="#JAVA中常见集合部分：" class="headerlink" title="JAVA中常见集合部分："></a>JAVA中常见集合部分：</h2><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection:"></a>Collection:</h3></li>
<li>ArrayList:实现了基于动态数组的数组结构，默认长度为0，最大长度为Interger最大值-8，当数组长度超载时，每次增幅50%，因为内存中储存的地址连续，所以查询效率会比较高，删除和添加效率较低。</li>
<li>LinkedList:基于链表的数据结构，地址是任意的，所以在插入或者删除的时候，内存中对于地址的操作较为轻松。</li>
<li>HashSet：哈希表实现的，其中的数据是无序，不可重复的，根据hash函数区别重复元素可以放入null.</li>
<li>LinkedHashSet：哈希表实现的有序，不可重复的集合。</li>
<li>TreeSet：二叉树实现的，有序的，不可重复的，不允许存储null值</li>
<li>Map:HashMap,ConcurrentHashMap</li>
</ul>
<h2 id="并发和多线程："><a href="#并发和多线程：" class="headerlink" title="并发和多线程："></a>并发和多线程：</h2><ol>
<li><p>生产者和消费者模型：</p>
</li>
<li><p>可见性：当多线程的共享变量发生变化时，其他线程能看到变化后的值，</p>
</li>
<li>重排序：编译器或者cpu会在不改变单线程代码语义的前提下对代码的执行顺序进行优化，这可能会引发线程不安全。</li>
<li>原子性：对变量的操作具有不可分割性。</li>
<li>Synchronized和Lock:Synchronized是 Java内置的一个特性关键字，Lock是一个接口，Synchronized在发生异常时会主动释放锁，Lock需要主动调用unLock()方法来释放持有的锁，但是Lock可以让阻塞等待的线程响应中断，而Synchronized会一直阻塞下去（死锁），如果线程之间并发争抢资源不严重，Synchronized的性能比Lock要好，反之，则Lock的性能比较好。公平锁：等待时间长的线程优先获得锁。</li>
<li>wait和sleep的区别：每个对象都持有一个内部moniter对象，JVM会为每个对象维护两个“队列”，分别是EntrySet和WaitSet.EntrySet用于存储等待获取对象的内部moniter的所有线程，而waitSet用于存储执行了obj.wait/wait(long ms)方法的所有线程。sleep()方法属于Thread类，wait()方法属于Object类，sleep会导致当前线程让出cpu的使用权到指定的时间，期间仍然会保持对锁的监控状态，所以，调用sleep方法并不会释放线<br>程所持有的锁，而wait方法会放弃该线程持有的锁对象，进入waitSet，此时线程状态为BLOCKED状态。当使用notify唤醒该线程时，线程状态标记为RUNABLE状态,线程进入EntrySet中和其他活跃线程争抢锁的持有权。</li>
<li>单机事务：事务的核心是锁和并发，四大特性是指原子性（Atomic）、一致性（Consistency）,隔离性（isolation）和持久性（duration）.2PL:数据库中的update,insert,delete都是先读后写的方式。处理事务常见的方式有排队法：单线程序列化读写，不需要冲突控制，但是对于硬盘一类的慢速设备性能较差，对于redis一类的内存数据库，内存和单个cpu绑定，针对此内存块的数据的读写操作都是在单个cpu上完成，既没有线程上下文切换的时候速度是最快的。对于慢速设备需要使用多线程和异步的方式对请求进行批量缓存提交，线程和请求<br>之间没有绑定关系。排他锁：对事物之间的共享数据进行锁，完成数据库系统的访问控制。事务之间的调优原则是：尽可能减少锁的覆盖范围，表锁变行锁，增加锁上可并行的线程数量<br>如：读锁和写锁，读写线程分离。并行读取数据，选择正确的锁类型：悲观锁适用于并发争抢比较严重的场景，乐观锁适合不怎么严重的场景。</li>
<li>分布式事务：分布式事务指的多个微服务之间的事务不一致导致的数据一致性问题。解决的办法最常用的是oracle 的xa二阶段提交协议，第一阶段，有一个协调中心节点向所有参与事务<br>节点进行询问请求，所有参与节点进行各自事务相关的数据更新，并将更新日志写入undo log或者redo log中，用于提交或者回滚。当所有的参与节点返回成功给中心调节节点的时候，开始<br>执行第二阶段，第二阶段，协调中心向所有参与者发送让他们commit的请求，所有参与者进行本地事务的提交，提交成功后，返回完成消息给中中心节点，，分布式事务完成。</li>
<li>并行是指两个或者多个事件在同一刻发生；并发是指两个或者多个事件在同一时间间隔发生；</li>
<li>进程是资源调度（指内存资源或者IO设备这种资源）的基本单位，线程是cpu调度的基本单位。</li>
<li>volatile是轻量级的synchronized,他在并发环境中保证了共享变量的可见性，并禁止重排序，原子性保证：但对long类型或者double类型的不行，因为那是两步操作</li>
<li>内存可见性：Java线程之间的通信由Java内存模型控制。JMM决定了一个线程对共享变量的操作结果何时对另一个线程可见，每个线程独有的本地内存，本地内存中存储了共享变量的副本，本地内存是JMM抽象出来的一个概念，实际并不存在。JMM通过插入特定的内存屏障指令来禁止cpu级别的指令重排序。JSP-133规范采用happens-before的概念来阐述操作可见性，在JMM中，如果一个操作的执行结果对另一个操作可见，那么这两个操作必定要存在happens-before关系，这样的操作可以不同的线程之间或者同一个线程之内。</li>
<li>CAS(compare and swap)Atomicxxx类型的变量和Lock操作类的底层都是实现了此机制，对变量的操作涉及到3个操作数，内存中的值，变量旧的预期值，要修改的值。当要修改时会检查内存中的值和变量旧的预期值是否相同，如果不同，则认为提交更新失败，线程会自旋等待一段时间后重新计算当前内存值，和要修改的新值。CAS对cpu的要求比较高，且只能保证一个变量的原子性，且存在ABA问题。ABA问题：A线程修改了变量的值为另一个，B线程比较当前旧预期值和内存中的值是相同的，然后阻塞，线程C将变量的值从另一个变更为原来的值，然后B拿到锁，开始执行CAS步骤，又将变量的值重新更新为另一个。解决方法，对变量添加版本号的标识，每一次的更新都会对版本号做变化，更新前会对版本号做对比，不同则不能更新。</li>
<li>线程安全的定义（周志明）：当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替进行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为，那么称这个类是线程安全的  </li>
</ol>
<h2 id="框架部分："><a href="#框架部分：" class="headerlink" title="框架部分："></a>框架部分：</h2><ol>
<li>RPC:调用本地函数一样调用远程其他虚拟机内的函数，屏蔽了底层的传输方式和序列化方式，降低了服务之间沟通的成本，<br>gRPC：google开源的一款语言中立的RPC框架，基于Http2协议（双向流，消息头压缩,单TCP的多路复用，服务端推送）,基于IDL文件定义服务。通过proto3工具生成指定语言的数据结构、<br>服务端接口和指定语言的客户端Stub,序列化支持PB(protocal Buffer)和json,PB是一种语言无关的高性能序列化框架。</li>
<li>tomcat:tomcat作为一个jsp/servlet容器，有三种工作模式：独立的servlet容器，进程内的servlet容器，进程外的servlet容器。tomcat在不同工作模式下的请求分为两类。tomcat作为应用程序服务器，请求来自于前端的Web服务器.tomcat作为独立服务器，请求来自于web浏览器。  </li>
</ol>
<h2 id="No-Sql相关："><a href="#No-Sql相关：" class="headerlink" title="No Sql相关："></a>No Sql相关：</h2><ul>
<li>Redis的5中常用数据类型string（最大大小为512M）,list（双向链表），set(value永远为null的HashMap)，zset,hash(value是一个HashMap,适合存储对象).  支持pop/push,add/remove 操作，取交集和并集等原子性操作。支持序列化到磁盘或者文件。默认端口为6379.</li>
<li>Redis的持久化策略：RDB:在指定的时间内将snapshot快照写入磁盘，恢复时将文件直接读入内存，场景分析：大规模数据的恢复，且对数据恢复的完整性不敏感。最后一次持久化后的数据可能丢失。</li>
<li>AOF:以日志的形式来记录每个写操作.使用场景：备份机制更稳健，丢失数据概率更低，日志文本可读。</li>
<li>Redis的消息订阅和发布：按照频道订阅，可以一次订阅多个，发布者发布后，收到消息。可以按照规则订阅，订阅多个，使用通配符*</li>
<li>Redis的使用场景：<ol>
<li>高速数据缓存服务，</li>
<li>分布式session共享：使用redis集群做session共享服务器，</li>
<li>分布式锁：最简单的方式在实例里创建一个键值，使用Jedis set（key,requestId,NX,EX,30000）;使用唯一key作为锁，相应的value作为对应的请求的Id,可避免加锁和解锁不是同一个人这种情况，使用过期时间可保证客户端宕机不会发生死锁的情况，锁到时间会自动删除，且必须保证任意时刻，只有一个客户端持有锁。</li>
</ol>
</li>
<li>Redis集群采用一主多仆方式，或多主多仆方式，主（写）从（读）之间通过同步命令不断复制数据，仆服务器读取主的RDB文件。当主机挂掉，需要手动让仆成为主机，如果通过哨兵模式，仆服务器可自动成为主服务器</li>
<li>哨兵服务器:负责服务器的投票抉择问题，根据从服务器的优先级决定谁成为主服务器。</li>
<li>缓存问题：<ol>
<li>缓存并发:缓存过期或者在更新，且同时存在大量并发请求该key，导致的缓存失效，请求直接到达数据库层会导致数据一致性问题，或者服务“雪崩”。解决方法是对查询缓存操作加锁，阻塞直至重建缓存。</li>
<li>缓存雪崩：当缓存失效时间相同时，可能导致同时大量缓存同时失效，导致数据库查询压力骤增，引发雪崩，可将缓存失效时间均匀平摊在时间轴上。</li>
<li>缓存击穿：某个key对应的数据为空，缓存没有命中，导致不必要的数据库查询操作，通过设置布隆过滤器，将有可能存在的数据hash到一个足够大的bitmap中。一个一定不存在的数据一定会被过滤掉，从而避免了请求直达数据库。  </li>
</ol>
</li>
</ul>
<h2 id="RDBMS数据库相关-mtsql-："><a href="#RDBMS数据库相关-mtsql-：" class="headerlink" title="RDBMS数据库相关(mtsql)："></a>RDBMS数据库相关(mtsql)：</h2><ul>
<li>普通索引</li>
<li>唯一性索引,必须指定为primary key</li>
<li>全文索引单列索引，多列索引</li>
<li>聚集索引和非聚集索引：MyIsam的B+Tree的叶子节点上的data,并不是数据本身，而是数据存放的地址，其是非聚集索引.Innodb的数据文件本身就是索引文件，B+Tree的叶子节点上的data就是数据本身，key为主键，这是聚集索引，聚簇索引的数据的物理存放顺序与索引顺序是一致的。</li>
<li>B+树是为磁盘或其他直接存储辅助设备而设计的一种平衡查找树，所有记录节点都是按照键值得大小顺序存放在同一层的叶节点中，各叶节点以指针的方式进行连接。</li>
<li>MyIsam是mysql5.5.5以前的默认存储引擎，每个表在MyIsam中都以三个以表名命名的物理文件构成，分别是：.frm(表结构文件) .myd(表数据文件) .myi（索引文件），但是MyIsam不支持事务，查询效率较快，会存储表的行数，故count(*)函数很快。</li>
<li>Innodb也有.frm表结构文件，但是数据文件和索引文件是存储在一起的，有支持事务和安全的日志文件（很重要）回滚和恢复数据的重要手段。行级锁（高并发适用）、增删改性能较高因为不会重建表。count查询比MyIsam低（会遍历全表）。</li>
<li>索引可以加快查询效率，降低数据库的排序成本，因为索引就是对字段数据进行排序后存储的。如果待查询的字段和索引键字段一致，就可以不用排序了。但是索引会增加增删改操作带来的IO量和调整索引的计算量，还有空间的存储量也会占用，在对较频繁的字段的查询的时候可以使用索引，唯一性太差的字段也不适合索引，即使频繁被查询。增删改的操作大于检索操作的也不适用索引。<br>MQ相关：(RocketMQ)</li>
<li>mq异步解耦指的是：挡住前端请求数据的洪峰，保证后端系统的稳定性。异步要求服务端对数据的实时性要求不高，对数据的可靠性要求高。</li>
<li>使用场景：（1）发布订阅模式，（2）消息优先级有要求（3）消息有序性要求，如购物行为。（4）消息过滤，无用消息的处理（5）消息的持久化（数库库或者KV存储系统或者文件等））（5）回溯消费，消息重试，定时消息，分布式事务等等。<br>JVM:</li>
<li>类的加载机制：类的加载值得时将类的.class文件中的二进制数据读入到内存中，将其放在运行时的数据区的方法内，然后再堆区创建一个java.lang.class对象，用来封装类在方法区内的数据结构，并提供了访问方法区内的这些数据结构的方法。</li>
<li>类的生命周期：加载（加载二进制数据到内存中），连接，初始化（静态变量赋初值，常量赋值），使用（new()） 和卸载 (垃圾回收)。</li>
<li>jvm初始化步骤：（1）假如这个类没有没加载和连接，则程序先加载并连接。(2)假如该类的直接父类没有被初始化，则先初始化其直接父类，假如类中有初始化语句，则系统依此执行这些初始化语句。</li>
<li>类初始化时机：只有当类的主动使用时才会导致类的初始化，主动使用的方式有：  </li>
</ul>
<h2 id="Sun-JDK关于JVM监控和处理故障的命令"><a href="#Sun-JDK关于JVM监控和处理故障的命令" class="headerlink" title="Sun JDK关于JVM监控和处理故障的命令:"></a>Sun JDK关于JVM监控和处理故障的命令:</h2><blockquote>
<p>jps:JVM Process Status Tool:显示指定系统内所有的HotSpot进程(jps -l -m)<br>jstat：JVM static Monitoring是用于监视虚拟机运行时状态信息的命令<br>jmap:JVM Memory Map 用于生成heap dump文件，堆快照文件，一般用MAT工具进行分析，大对象无法被回收或者过多应该被回收的对象一直被引用。<br>jstack:用于生成jvm当前时刻的线程快照，线程快照是当前JVM中每条线程的方法的执行堆栈集合，可以查询线程死锁或者循环等待等问题。<br>jinfo:JVM Configure Info 用于查看和调整虚拟机的运行时参数，能看到更详细的，未被指定的参数。  </p>
</blockquote>
<h2 id="linux-相关："><a href="#linux-相关：" class="headerlink" title="linux 相关："></a>linux 相关：</h2><blockquote>
<p>cat[选项][文件]：查看文件内容，但是对于较大的文件不适合，会过多占用系统资源，无法进行交互和控制<br>more[选项][文件]：分页查看文件、<br>less[选项][文件]：更高级的查看和搜索文件内容的方式<br>tail[-f（必要参数）][可选参数][文件]：查看文件的最后几行，一般用于日志文件的实时查看。head:查看文件的头几行。<br>wc [选项参数][文件]：统计文件中字符的个数   </p>
</blockquote>
<h2 id="数据结构和算法部分："><a href="#数据结构和算法部分：" class="headerlink" title="数据结构和算法部分："></a>数据结构和算法部分：</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JAVA基础部分：&quot;&gt;&lt;a href=&quot;#JAVA基础部分：&quot; class=&quot;headerlink&quot; title=&quot;JAVA基础部分：&quot;&gt;&lt;/a&gt;JAVA基础部分：&lt;/h2&gt;&lt;h3 id=&quot;final-finally-finalize区别：&quot;&gt;&lt;a href=&quot;#final-finally-finalize区别：&quot; class=&quot;headerlink&quot; title=&quot;final,finally,finalize区别：&quot;&gt;&lt;/a&gt;final,finally,finalize区别：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;final可以修饰方法，类，成员变量，当final修饰基本类型的成员变量时，该成员变量的值不可变，当fina修饰引用变量时，改引用指向的对象实体不可变，但是对象实体中的内容可变。当修饰类时，final和abstract不可同时使用，abstract意指该类是抽象的，用于扩展的。final修饰类时则意味着该类是不可被继承和扩展的。修饰方法时，该方法不可被重写。修饰形参时，该形参不可在方法内被重新赋值。
    
    </summary>
    
      <category term="Java" scheme="https://lavaong.github.io/categories/Java/"/>
    
    
      <category term="学习" scheme="https://lavaong.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ实战(1)</title>
    <link href="https://lavaong.github.io/2018/02/21/RocketMQ%E5%AE%9E%E6%88%98-1/"/>
    <id>https://lavaong.github.io/2018/02/21/RocketMQ实战-1/</id>
    <published>2018-02-21T13:04:34.000Z</published>
    <updated>2018-06-14T09:53:29.698Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;RocketMQ是一款阿里自主开源的分布式消息中间件，其没有完全遵循JMS(JAVA Message Services)规范，并且和常用的ActiveMQ相比，具有很多优良的特性，并且在如今高负载，大流量的业务场景下完全可以胜任。<br><a id="more"></a></p>
<blockquote>
<ol>
<li>RocketMQ原生支持分布式，不用像ActiveMQ一样做额外的配置，<strong>单点式消息中间件</strong></li>
<li>RocketMQ保证了消息的严格顺序，ActiveMQ可能会有消息错乱。</li>
<li>丰富的消息拉取模式。</li>
<li>亿级消息堆积能力</li>
</ol>
</blockquote>
<p>&nbsp;&nbsp;&nbsp;RocketMQ的发布订阅模式规定了其采用了Group机制实现消息的负载均衡。即根据Topic的消息数，均衡分布到每个Group相应的数据量，其中Group可以是一台机器或者一个进程。</p>
<h3 id="RocketMQ的集群部署"><a href="#RocketMQ的集群部署" class="headerlink" title="RocketMQ的集群部署"></a>RocketMQ的集群部署</h3><p><img src="/uploads/TB1lEPePXXXXXX8XXXXXXXXXXXX.png" alt="alt text"></p>
<h4 id="多Master模式"><a href="#多Master模式" class="headerlink" title="多Master模式"></a>多Master模式</h4><p>多个Master存在的模式，当一个Master宕机的时候，会由于其他的代替，缺点是宕机的Master上的消息无法再被订阅，除非复活。</p>
<h4 id="多Master多Slave模式（同步双写）"><a href="#多Master多Slave模式（同步双写）" class="headerlink" title="多Master多Slave模式（同步双写）"></a>多Master多Slave模式（同步双写）</h4><p>适用于并发量比较大的情况下，只有Master/Slave都成功才能成功，相比于异步辅助，提高了强一致性，但是减缓了读写速度</p>
<h4 id="多Master单Slave模式（异步复制）"><a href="#多Master单Slave模式（异步复制）" class="headerlink" title="多Master单Slave模式（异步复制）"></a>多Master单Slave模式（异步复制）</h4><p>Master/Slave有短暂的延迟，高可用模式，Master宕机的时候，Slavek可以读到消息，但是可能会有少量的信息丢失。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;RocketMQ是一款阿里自主开源的分布式消息中间件，其没有完全遵循JMS(JAVA Message Services)规范，并且和常用的ActiveMQ相比，具有很多优良的特性，并且在如今高负载，大流量的业务场景下完全可以胜任。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://lavaong.github.io/categories/Java/"/>
    
    
      <category term="中间件" scheme="https://lavaong.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaSE中的默认VM-HotSpot</title>
    <link href="https://lavaong.github.io/2018/02/03/JavaSE%E4%B8%AD%E7%9A%84%E9%BB%98%E8%AE%A4VM-Hotspot/"/>
    <id>https://lavaong.github.io/2018/02/03/JavaSE中的默认VM-Hotspot/</id>
    <published>2018-02-03T10:51:22.616Z</published>
    <updated>2018-06-14T08:59:13.850Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;”hot spot”故名思意,就是热点的意思，在JVM的执行引擎中，热点又通常指执行频率高的代码，而执行频率高的评判标准则是有很多种表现，如<em>方法</em>的执行次数，或者<em>某条执行路径</em>的次数。HotSpot内部的执行引擎采用混合执行模式，即包括解释器和自适应编译器（Adaptive-compile）.<br><a id="more"></a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虚拟机的默认配置下，初始化时所有的Java方法都由解释器执行，解释器记录着每个方法的执行次数和循环次数，并以这两个指标去判断一个方法的”热度”。等到一个方法足够”热”的时候，JVM就会启动该方法的编译，这种在所有执行过的代码里只寻找一部分编译的做法，叫自适应编译，为了实现动态编译，执行引擎需要多层，且一定有一层是进程初始阶段的编译，然后再让自适应编译处理其中的部分代码。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JIT编译（Just-in-time）即每当一部分代码要第一次准备执行时，将这部分代码编译。同时JIT编译和自适应编译都属于动态编译的范畴，其特点是在程序运行的时候进行编译，而不是在程序开始之前就进行编译，和静态编译相互区分。而在HotSpot中的VM是使用”JIT编译的（<em>动态编译</em>）”。其中的Client Compile(C1)和Sever Compile(C2)通常被称为”JIT编译器”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;”hot spot”故名思意,就是热点的意思，在JVM的执行引擎中，热点又通常指执行频率高的代码，而执行频率高的评判标准则是有很多种表现，如&lt;em&gt;方法&lt;/em&gt;的执行次数，或者&lt;em&gt;某条执行路径&lt;/em&gt;的次数。HotSpot内部的执行引擎采用混合执行模式，即包括解释器和自适应编译器（Adaptive-compile）.&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://lavaong.github.io/categories/Java/"/>
    
    
      <category term="虚拟机" scheme="https://lavaong.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>工作点滴0001</title>
    <link href="https://lavaong.github.io/2017/08/16/%E5%B7%A5%E4%BD%9C%E7%82%B9%E6%BB%B40001/"/>
    <id>https://lavaong.github.io/2017/08/16/工作点滴0001/</id>
    <published>2017-08-16T09:05:38.000Z</published>
    <updated>2018-06-14T09:20:24.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h3><p>公司还在用svn,项目从里面checkout出来，然后ide导入本来是一件简单不过的事情，但是，但是，最后还是搞了一天，从侧面反映了自己这个农民工还是不熟练，详情如下。<br><a id="more"></a><br>项目采用在IDE（eclipse）maven 导入的方式构建，经过漫长的jar包下载和配置文件Validation（后来才想起来该关掉这个……~.~），项目出现了3万+个errors,项目工程模块分的巨多，这也导致了问题排查的困难，一开始我也怀疑是maven配置文件的原因，最后真是，拿到了正确的配置文件，开心去替换了下，错误减少了点，而且剩下的大部分xxx cannot be resolved to a type这种错误，百度和google都试了一下，不得而解，最后试了某一个博客的方法，具体做法是：</p>
<ol>
<li>project-automatically 对勾给取消掉了，应该是防止自动构建用的选项，</li>
<li>project-clean</li>
<li>项目clean 完毕,在progress视图里又看到了项目在自动构建（不解），可能会导致eclipse报错，栈溢出了（惊吓）。</li>
<li>项目右键，maven-update project,项目更新完毕，错误消失。</li>
</ol>
<p>###原因思考：<br>网上的解释是eclipse和maven的clean并不同步（存疑解释）,另一种是因为某些特殊原因，eclipse没能自动编译(应该是maven生成的)源代码到build/classes（或其他classes目录），导致类型查找不到,(什么原因呢？)</p>
<p>###tips(项目执行这个命令会生成 mvn eclipse:eclipse 会自动生成相关的类文件，不需要在用maven 方式导入项目,以普通方式导入即可)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;项目构建&quot;&gt;&lt;a href=&quot;#项目构建&quot; class=&quot;headerlink&quot; title=&quot;项目构建&quot;&gt;&lt;/a&gt;项目构建&lt;/h3&gt;&lt;p&gt;公司还在用svn,项目从里面checkout出来，然后ide导入本来是一件简单不过的事情，但是，但是，最后还是搞了一天，从侧面反映了自己这个农民工还是不熟练，详情如下。&lt;br&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://lavaong.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>DNS[域名系统]基本解析</title>
    <link href="https://lavaong.github.io/2017/06/27/DNS-%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F-%E5%9F%BA%E6%9C%AC%E8%A7%A3%E6%9E%90/"/>
    <id>https://lavaong.github.io/2017/06/27/DNS-域名系统-基本解析/</id>
    <published>2017-06-27T02:47:03.000Z</published>
    <updated>2018-06-14T08:57:40.399Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DNS-Domain-Name-System"><a href="#DNS-Domain-Name-System" class="headerlink" title="DNS(Domain Name System)"></a>DNS(Domain Name System)</h3><p>此协议根据域名解析到此域名对应的相应的ip地址，然后再来访问此IP地址对应得网站或者主机。首先，本机一定要知道DNS服务器的IP地址，否则上不了网，通过DNS服务器，才能知道某个域名的IP地址到底是什么,DNS服务器的IP地址，有可能是动态的，每次上网是由网关分配，这叫做DHCP机制，也有可能是事先固定的地址，一些公网的DNS服务器，也可以使用，其中最有名的就是Google的8.8.8.8和Level3 的4.2.2.2<br><a id="more"></a></p>
<h3 id="过程采用了分级查询–域名的层级结构如下："><a href="#过程采用了分级查询–域名的层级结构如下：" class="headerlink" title="过程采用了分级查询–域名的层级结构如下："></a>过程采用了分级查询–域名的层级结构如下：</h3><p>主机名（这是用户在自己的域里面为服务器分配的名称，用户可以任意分配）.次级域名.顶级域名.root(根域名，默认是省略的)。每一级都有自己的NS记录（NameServer）此记录指向该级域名的域名服务器，此服务器知道下一级域名的各种记录。</p>
<ol>
<li>DNS服务器内置了根域名服务器的NS记录和IP地址（这些记录一般是不会变化的，）根域名服务器全世界只有13台，分别是从A.root-ser<br>vers.net到M.root-servers.net。</li>
<li>然后DNS服务器向所有这些根域名服务器的IP地址发出”0查询0“请求，询问索要查询的域名（如：www.douyu.com）的顶级域名服务器<br>com.的NS记录，最先回复的根域名服务器将被缓存，以后只向这台服务器发送请求.     </li>
<li>接下来，DNS服务器向这些顶级域名服务器发出请求，询问次级域名douyu.com的NS记录，返回了此次级域名的四条NS记录和其对应的服务<br>器名称和IP。</li>
<li>最后，DNS服务器向这些次级域名发送查询请求查询。主机层www对应的NS记录，返回相应的主机服务器和其对应的IP.此IP即是我们要的结<br>果IP。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DNS-Domain-Name-System&quot;&gt;&lt;a href=&quot;#DNS-Domain-Name-System&quot; class=&quot;headerlink&quot; title=&quot;DNS(Domain Name System)&quot;&gt;&lt;/a&gt;DNS(Domain Name System)&lt;/h3&gt;&lt;p&gt;此协议根据域名解析到此域名对应的相应的ip地址，然后再来访问此IP地址对应得网站或者主机。首先，本机一定要知道DNS服务器的IP地址，否则上不了网，通过DNS服务器，才能知道某个域名的IP地址到底是什么,DNS服务器的IP地址，有可能是动态的，每次上网是由网关分配，这叫做DHCP机制，也有可能是事先固定的地址，一些公网的DNS服务器，也可以使用，其中最有名的就是Google的8.8.8.8和Level3 的4.2.2.2&lt;br&gt;
    
    </summary>
    
      <category term="Other" scheme="https://lavaong.github.io/categories/Other/"/>
    
    
      <category term="学习" scheme="https://lavaong.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
